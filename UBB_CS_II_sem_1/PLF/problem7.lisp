(defun revs (lista ret_lista) 
    (cond 
        ((null lista) ret_lista)
        (T (revs (cdr lista) (cons (car lista) ret_lista)))
    )
)
(defun t_revs (lista)
    (revs lista ())
)
(defun elim (lista pos)
    (cond
        ((null lista) nil)
        ((equal pos 1) (elim (cdr lista) -1))
        (T (cons (car lista)(elim (cdr lista) (- pos 1))))
    )
)
(print (elim '(1 2 3 4 5) 1))

(defun make_number (lista)
    (cond
        ((null lista) 0)
        (T (+ (* (make_number (cdr lista)) 10)(car lista)))
    )
)
(defun t_make_number (lista)
    (make_number (t_revs lista))
)
(defun make_list (num)
    (cond
        ((<= num 0) nil)
        (T (cons (mod num 10) (make_list (floor num 10))))
    )
)
(defun t_make_list (num)
    (t_revs(make_list num))
)
(defun res (lista)
    (t_make_list (+ 1 (t_make_number lista)))
)
(defun is_in (lista num)
    (cond
        ((null lista) 0)
        ((equal num (car lista)) 1)
        (T (is_in (cdr lista) num))
    )
)
(defun make_set (lista)
    (cond 
        ((null lista) nil)
        ((equal (is_in (cdr lista) (car lista)) 1) (make_set (cdr lista)))
        (T (cons (car lista) (make_set (cdr lista))))
    )
)
(defun t_make_set (lista)
    (t_revs(make_set (t_revs (get_atoms lista))))
)
(defun get_atoms (lista)
    (cond 
        ((null lista) nil)
        ((listp (car lista)) (append (get_atoms (car lista)) (get_atoms (cdr lista))))
        (T (cons (car lista) (get_atoms (cdr lista))))
    )
)
(print (t_make_number '(1 2 3 4 5)))
(print (t_make_list 123))
(print (res '(1 9 3 5 9 9)))
(print (is_in '(1 2 3 4 5) 3))
(print (t_make_set '(1 (2 (1 3 (2 4) 3) 1) (1 4))))